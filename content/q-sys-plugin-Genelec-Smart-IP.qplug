PluginInfo = {
    Name = "Genelec~SmartIP", -- The tilde here indicates folder structure in the Shematic Elements pane
    Version = "0.0.2",
    Id = "Smart-Ip.0.0.2-master", -- show this is just a unique id. Show some commented out 'fun' unique ids
    Description = "Genelec Smart Ip Speaker Plug-in",
    ShowDebug = true,
    Author = "Hans Ekman, Audico Systems Oy 2020",
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
    White = {255, 255, 255},
    Black = {0, 0, 0},
    Red = {255, 0, 0},
    Green = {0, 255, 0},
    GenelecGreen = {0, 122, 83},
    GrayBackground = {50,62,68},
    TextBoxGray = {194,194,194}
}

-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
    props = { }
    return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
    return props
end

function GetColor(props)
    return Colors.GenelecGreen
end
-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
    ctls = {

        -- ControlType == Button
        {
            Name = "Mute",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Input",
            Count = 1,
            UserPin = true
        },
        -- ControlType == Knob
        
        {
            Name = "Gain",
            ControlType = "Knob",
            ControlUnit = "Float",
            Min = -120.0,
            Max = 0,
            UserPin = true,
            PinStyle = "Input",
            Count = 1,
        },

        -- ControlType == Text
        {
            Name = "IPAddress",
            ControlType = "Text",
            UserPin = true,
            PinStyle = "Input",
            Count = 1,
        },

        {
            Name = "User",
            ControlType = "Text",
            UserPin = true,
            PinStyle = "Input",
            Count = 1,
        },

        {
            Name = "Password",
            ControlType = "Text",
            UserPin = true,
            PinStyle = "Input",
            Count = 1,
        },
        
        {
            Name = "MAC",
            ControlType = "Text",
            UserPin = true,
            PinStyle = "Output",
            Count = 1,
        },

        {
            Name = "Barcode",
            ControlType = "Text",
            UserPin = true,
            PinStyle = "Output",
            Count = 1,
        },
        
        {
            Name = "HostName",
            ControlType = "Text",
            UserPin = true,
            PinStyle = "Output",
            Count = 1,
        },

        {
            Name = "Model",
            ControlType = "Text",
            UserPin = true,
            PinStyle = "Output",
            Count = 1,
        },

        {
            Name = "ReceiverName",
            ControlType = "Text",
            UserPin = true,
            PinStyle = "Output",
            Count = 1,
        }


    }
    return ctls
end

-- Variable holding Page Names for ease
local pagenames = {"Control"}

-- This function allows you to populate pages in your plugin.
--[[
function GetPages(props)
    pages = {}
    table.insert(pages, {name = pagenames[1]})
    return pages
end
]]
function GetPages(props)
    local pages = {}
    local function AddPage(name) table.insert( pages, { name = name }) end
    for ix,name in ipairs(pagenames) do
      AddPage(pagenames[ix])
    end
    return pages
  end
  


-- This function allows you to layout pages in your plugin.
function GetControlLayout(props)
    -- layout holds representaiton of 
    local layout = {}
    -- graphics holds aesthetic & design items
    --local graphics = {}
    -- ctl_str is a helper string to get around system not indexing single value as [1]
    --local ctl_str = tostring(props["SomeValue"].Value == 1 and "" or " " .. PageIndex)
    -- x,y allows an easy method of knowing where you are relative to the section being designed
    local x, y = 0, 0
    local xControls, yControls = 25, 70

    layout["Mute"] = {
        PrettyName = "Mute",
        Style = "Button",
        ButtonStyle = "Toggle",
        Legend = "MUTE",
        TextFontSize = 16,
        Color = {223, 0, 36},
		UnlinkOffColor = false,
        Position = {xControls + 298, yControls + 355},
		Size = {64, 40}
    }

    layout["Gain"] = {
        PrettyName = "Gain",
        Style = "Fader",
        ControlUnit = "Float",
        Color = Colors.GenelecGreen,
        Position = {xControls + 300, yControls + 30},
        Size = { 60 , 320 },
        TextFontSize = 40,
        ShowTextbox = true,
      }

    layout["IPAddress"] ={
        Style = "Text",
        PrettyName = "Device~IP Address",
        TextBoxStyle = "Normal",
        Position = { xControls + 90, yControls + 45 },
        Size = { 100 , 24 },
        Fill = Colors.White,
        Color = Colors.White,
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
      }

      layout["User"] ={
        Style = "Text",
        PrettyName = "Device~User",
        TextBoxStyle = "Normal",
        Position = { xControls + 90, yControls + 75 },
        Size = { 100 , 24 },
        Fill = Colors.White,
        Color = Colors.White,
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
      }

      layout["Password"] ={
        Style = "Text",
        PrettyName = "Device~Password",
        TextBoxStyle = "Normal",
        Position = { xControls + 90, yControls + 105 },
        Size = { 100 , 24 },
        Fill = Colors.White,
        Color = Colors.White,
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
      }

      layout["MAC"] ={
        Style = "Text",
        PrettyName = "Info~MAC",
        TextBoxStyle = "Normal",
        IsReadOnly = true,
        Position = { xControls + 90, yControls + 165 },
        Size = { 100 , 24 },
        Fill = Colors.White,
        Color = Colors.TextBoxGray,
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
      }

      layout["Barcode"] ={
        Style = "Text",
        PrettyName = "Info~Barcode",
        TextBoxStyle = "Normal",
        IsReadOnly = true,
        Position = { xControls + 90, yControls + 195 },
        Size = { 100 , 24 },
        Fill = Colors.White,
        Color = Colors.TextBoxGray,
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
      }

      layout["HostName"] ={
        Style = "Text",
        PrettyName = "Info~HostName",
        TextBoxStyle = "Normal",
        IsReadOnly = true,
        Position = { xControls + 90, yControls + 225 },
        Size = { 100 , 24 },
        Fill = Colors.White,
        Color = Colors.TextBoxGray,
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
      }

      layout["Model"] ={
        Style = "Text",
        PrettyName = "Info~Model",
        TextBoxStyle = "Normal",
        IsReadOnly = true,
        Position = { xControls + 90, yControls + 255 },
        Size = { 100 , 24 },
        Fill = Colors.White,
        Color = Colors.TextBoxGray,
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
      }

      layout["ReceiverName"] ={
        Style = "Text",
        PrettyName = "Info~ReceiverName",
        TextBoxStyle = "Normal",
        IsReadOnly = true,
        Position = { xControls + 90, yControls + 285 },
        Size = { 100 , 24 },
        Fill = Colors.White,
        Color = Colors.TextBoxGray,
        TextSize = 12,
        HTextAlign = "Center",
        VTextAlign = "Center",
      }

    -- Graphics Section
    graphics =
    {
        {
            Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
            --Text = "Design Elements",
            --HTextAlign = "Left",
            Fill = Colors.GrayBackground,
            CornerRadius = 0,
            StrokeColor = Colors.Black,
            StrokeWidth = 1,
            Position = {x, y},
            Size = {420, 500} -- The width of the main GroupBox is dependent on how many channels the user specified. More channels means a wider group box
        },
            --Logo
        {
            Type = "Svg", --  Logo
            Image = "",
            Position = { 15, 15 },
            Size = { 200, 34 }
        },
            -- Plug-in Title
        {
            Type = "Label",
            Text = "Smart IP Speaker Plug-In v." .. PluginInfo["Version"],
            Position = {220 , 32},
            Size = {200, 20 },
            TextSize = 14,
            Color = Colors.White,
            HTextAlign = "Left",
        },
            -- Gain Title
        {
            Type = "Label",
            Text = "GAIN",
            Position = {xControls + 300, yControls + 15},
            Size = {60, 20 },
            TextSize = 14,
            Color = Colors.White,
            HTextAlign = "Center",
         },
            -- Ip label
         {
            Type = "Label",
            Text = "IP Address",
            Position = {xControls, yControls + 45},
            Size = {80, 24 },
            TextSize = 14,
            Color = Colors.White,
            IsBold = true,
            HTextAlign = "Right",
         },

         {
            Type = "Label",
            Text = "User",
            Position = {xControls, yControls + 75},
            Size = {80, 24 },
            TextSize = 14,
            Color = Colors.White,
            IsBold = true,
            HTextAlign = "Right",
         },

         {
            Type = "Label",
            Text = "Password",
            Position = {xControls, yControls + 105},
            Size = {80, 24 },
            TextSize = 14,
            Color = Colors.White,
            IsBold = true,
            HTextAlign = "Right",
         },

         {
            Type = "Label",
            Text = "MAC",
            Position = {xControls, yControls + 165},
            Size = {80, 24 },
            TextSize = 14,
            Color = Colors.White,
            IsBold = true,
            HTextAlign = "Right",
         },

         {
            Type = "Label",
            Text = "Barcode",
            Position = {xControls, yControls + 195},
            Size = {80, 24 },
            TextSize = 14,
            Color = Colors.White,
            IsBold = true,
            HTextAlign = "Right",
         },

         {
            Type = "Label",
            Text = "Host Name",
            Position = {xControls, yControls + 225},
            Size = {80, 24 },
            TextSize = 14,
            Color = Colors.White,
            IsBold = true,
            HTextAlign = "Right",
         },

         {
            Type = "Label",
            Text = "Model",
            Position = {xControls, yControls + 255},
            Size = {80, 24 },
            TextSize = 14,
            Color = Colors.White,
            IsBold = true,
            HTextAlign = "Right",
         },

         {
            Type = "Label",
            Text = "Receiver Name",
            Position = {xControls - 20, yControls + 285},
            Size = {95, 24 },
            TextSize = 14,
            Color = Colors.White,
            IsBold = true,
            HTextAlign = "Right",
         }

         

    }
 
--[[     table.insert(
        graphics,
        {
            Type = "Text",
            Text = "My Text Field",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Left",
            Color = Colors.Black,
            Position = {x + 5, y + 20},
            Size = {100, 20}
        }
    ) ]]
    -- Buttons Section


    return layout, graphics
end

if Controls then
    for k, v in pairs(Controls) do
        if k == "ButtonToggle" then
            v.EventHandler = function(changedControl)
                if changedControl.Boolean == true then
                    Controls.IndicatorText.String = "Hello World !"
                elseif changedControl.Boolean == false then
                    Controls.IndicatorText.String = ""
                end
            end
        end
    end
end
